// db_init.js - ููุฏ ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจุฏูู ุจูุงูุงุช ููููุฉ
const { Pool } = require('pg');
require('dotenv').config();

// ุฅุนุฏุงุฏ ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: {
    rejectUnauthorized: false
  }
});

// ููุฏ SQL ูุฅูุดุงุก ุงูุฌุฏุงูู ููุท
const initSQL = `
-- ุญุฐู ุงูุฌุฏุงูู ุฅุฐุง ูุงูุช ููุฌูุฏุฉ (ููุชุทููุฑ ููุท)
DROP TABLE IF EXISTS sales CASCADE;
DROP TABLE IF EXISTS customers CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- ุฌุฏูู ุงููุณุชุฎุฏููู
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ุฌุฏูู ุงูุนููุงุก
CREATE TABLE customers (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    phone VARCHAR(50) NOT NULL,
    email VARCHAR(255),
    status VARCHAR(255) DEFAULT 'active',
    notes TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ุฌุฏูู ุงููุจูุนุงุช
CREATE TABLE sales (
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
    customer_id INTEGER REFERENCES customers(id) ON DELETE CASCADE,
    amount DECIMAL(10,2) NOT NULL,
    sale_date DATE NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- ุฅูุดุงุก indexes ููุฃุฏุงุก
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_customers_user_id ON customers(user_id);
CREATE INDEX idx_sales_user_id ON sales(user_id);
CREATE INDEX idx_sales_customer_id ON sales(customer_id);
CREATE INDEX idx_customers_status ON customers(status);
CREATE INDEX idx_sales_date ON sales(sale_date);

-- ุนุฑุถ ุชุฃููุฏ ุงูุฅูุดุงุก
SELECT 'โ ุชู ุฅูุดุงุก ุงูุฌุฏุงูู ุจูุฌุงุญ' as message;
`;

// ุฏุงูุฉ ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
async function initializeDatabase() {
    let client;
    try {
        console.log('๐ ุจุฏุก ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช...');
        
        // ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช
        client = await pool.connect();
        console.log('โ ุชู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
        
        // ุชูููุฐ ููุฏ SQL
        console.log('๐ ุฌุงุฑู ุฅูุดุงุก ุงูุฌุฏุงูู...');
        await client.query(initSQL);
        
        console.log('๐ ุชู ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ุจูุฌุงุญ!');
        console.log('๐ ุงูุฌุฏุงูู ุงูุชู ุชู ุฅูุดุงุคูุง:');
        console.log('   ๐ฅ users - ุฌุฏูู ุงููุณุชุฎุฏููู');
        console.log('   ๐จโ๐ผ customers - ุฌุฏูู ุงูุนููุงุก'); 
        console.log('   ๐ฐ sales - ุฌุฏูู ุงููุจูุนุงุช');
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);
    } finally {
        if (client) {
            client.release();
        }
        await pool.end();
        console.log('\nโ ุชู ุฅููุงุก ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช');
    }
}

// ุฏุงูุฉ ูุนุฑุถ ุญุงูุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
async function checkDatabaseStatus() {
    let client;
    try {
        client = await pool.connect();
        
        const tables = await client.query(`
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public'
        `);
        
        console.log('๐ ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช:');
        tables.rows.forEach(table => {
            console.log(`   - ${table.table_name}`);
        });
        
    } catch (error) {
        console.error('โ ุฎุทุฃ ูู ูุญุต ูุงุนุฏุฉ ุงูุจูุงูุงุช:', error.message);
    } finally {
        if (client) {
            client.release();
        }
        await pool.end();
    }
}

// ุงูุชุนุงูู ูุน ุฃูุงูุฑ ุงูุชุดุบูู
const command = process.argv[2];

switch (command) {
    case 'init':
        initializeDatabase();
        break;
    case 'status':
        checkDatabaseStatus();
        break;
    case 'help':
    default:
        console.log(`
๐ฏ ุฃูุงูุฑ ุฅุฏุงุฑุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช - Data Vision

๐น ุงูุงุณุชุฎุฏุงู:
  node db_init.js <command>

๐น ุงูุฃูุงูุฑ ุงููุชุงุญุฉ:
  init    - ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช ูุฅูุดุงุก ุงูุฌุฏุงูู
  status  - ุนุฑุถ ุญุงูุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช
  help    - ุนุฑุถ ูุฐู ุงููุณุงุนุฏุฉ

๐น ุฃูุซูุฉ:
  node db_init.js init     ๐พ ุชููุฆุฉ ุงูุฌุฏุงูู
  node db_init.js status   ๐ ุนุฑุถ ุงูุญุงูุฉ

๐น ููุงุญุธุงุช:
  - ุชุฃูุฏ ูู ุฅุนุฏุงุฏ ูุชุบูุฑ DATABASE_URL ูู ููู .env
  - ูุง ูุชู ุฅุถุงูุฉ ุฃู ุจูุงูุงุช ููููุฉ
        `);
        break;
}
